" ============= SETUP =============

let g:mapleader=' '

" language settings (have to be before ä and ö mappings)
let $LANG='en_US'
set fileformats=unix,dos
set fileencodings=ucs-bom,utf-8,default,latin1
set encoding=utf-8
scriptencoding utf-8


" temp file locations
let TempFolder = '/.temp'
let PluginsFolder = '/plugins'
let VimFolder = '/.vim'
exe 'set viminfo+=n~' . VimFolder . TempFolder . '/.viminfo'
let PathToTempFolder = $HOME . VimFolder . TempFolder
let PathToPluginsFolder = $HOME . VimFolder . PluginsFolder
let g:netrw_dirhistmax=0

" make sure that the temp file locations exists
if !isdirectory(PathToTempFolder)
    call mkdir(PathToTempFolder)
endif
for folder in ['/undo', '/backup', '/swap']
    if !isdirectory(PathToTempFolder . folder)
        call mkdir(PathToTempFolder . folder, 'p')
    endif
endfor

let &undodir = PathToTempFolder . '/undo'
let &backupdir = PathToTempFolder . '/backup'
let &directory = PathToTempFolder . '/swap'



" ============= PLUGINS =============

packadd! matchit  " enable the built-in plugin

call plug#begin(PathToPluginsFolder)

Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf.vim'                " fuzzy file finding

Plug 'google/vim-searchindex'          " better search [x/y]
Plug 'terryma/vim-smooth-scroll'       " smooth scrolling
Plug 'machakann/vim-highlightedyank'   " highlight yanks
Plug 'markonm/traces.vim'              " live substitution

Plug 'easymotion/vim-easymotion'       " jump to any position
Plug 'simnalamburt/vim-mundo'          " graphical undotree

Plug 'tpope/vim-surround'              " edit braces easily
Plug 'tpope/vim-commentary'            " comment out lines
Plug 'tpope/vim-repeat'                " repeat plugin commands
Plug 'vim-scripts/ReplaceWithRegister' " operator to replace text
Plug 'wellle/targets.vim'              " more text objects
Plug 'tommcdo/vim-exchange'            " change two objects
Plug 'tpope/vim-abolish'               " more advanced substitute etc
Plug 'tommcdo/vim-lion'                " alignment operator

Plug 'tpope/vim-eunuch'                " easy unix file operations

Plug 'xuhdev/vim-latex-live-preview', { 'for': 'tex' } " live preview for latex
Plug 'neoclide/coc.nvim', {'branch': 'release'}        " language-server plugin

" filetypes
Plug 'jparise/vim-graphql'
Plug 'cespare/vim-toml'

" colorshemes
Plug 'lifepillar/vim-solarized8'
call plug#end()


" neoclide/coc.nvim
set updatetime=300
set signcolumn=number

inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
inoremap <expr> <TAB> pumvisible() ? "\<C-y>" : "\<TAB>"

nmap <silent> <C-P> <Plug>(coc-diagnostic-prev)
nmap <silent> <C-N> <Plug>(coc-diagnostic-next)

nmap <silent> gd <Plug>(coc-definition)

nmap <silent> <Leader>t <Plug>(coc-type-definition)
nmap <silent> <Leader>i <Plug>(coc-implementation)
nmap <silent> <Leader>u <Plug>(coc-references)
nnoremap <silent> <Leader>d :call <SID>show_documentation()<CR>
nmap <silent> <leader>r <Plug>(coc-rename)
xmap <silent> <leader>o <Plug>(coc-format-selected)
nmap <silent> <leader>o <Plug>(coc-format)
nnoremap <silent> <Leader>1 :<C-u>CocList diagnostics<cr>
nnoremap <silent> <Leader>a :<C-u>CocList commands<cr>
nnoremap <silent> <Leader>h :<C-u>CocList outline<cr>
nnoremap <silent> <Leader>s :<C-u>CocList -I symbols<cr>

xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction


" tpope/vim-surround
nmap S ysiW

" google/vim-searchindex
let g:searchindex_line_limit=100000000

" xuhdev/vim-latex-live-preview
let g:livepreview_previewer = 'open -a Skim'
let g:livepreview_cursorhold_recompile = 0

" junegunn/fzf.vim
nnoremap <Leader>f :Files<CR>
nnoremap <Leader>l :Lines<CR>
nnoremap <Leader>g :Helptags<CR>
nnoremap <Leader>b :Buffers<CR>
nnoremap <Leader>m :History<CR>

" easymotion/vim-easymotion
let g:EasyMotion_keys='asdghklqwertyuiopzxcvbnmfj'
let g:EasyMotion_do_shade=0
let g:EasyMotion_do_mapping=0
let g:EasyMotion_smartcase=1
hi link EasyMotionTarget2First EasyMotionTarget
map <Leader>k <Plug>(easymotion-bd-f)

" machakann/vim-highlightedyank
let g:highlightedyank_highlight_duration=300

" simnalamburt/vim-mundo
let g:mundo_preview_statusline='Diff'
let g:mundo_tree_statusline='History'
let g:mundo_mirror_graph=0
let g:mundo_return_on_revert=0
let g:mundo_verbose_graph=0
nnoremap <silent> <Leader>n :MundoToggle<CR>

" vim-scripts/ReplaceWithRegister
nmap ö <Plug>ReplaceWithRegisterOperator
nmap Ö <Plug>ReplaceWithRegisterOperator$
nmap öö <Plug>ReplaceWithRegisterLine
xmap ö <Plug>ReplaceWithRegisterVisual

" terryma/vim-smooth-scroll
nnoremap <silent> <C-U> :<C-U>call smooth_scroll#up(&scroll, 0, 4)<CR>
nnoremap <silent> <C-D> :<C-U>call smooth_scroll#down(&scroll, 0, 4)<CR>
nnoremap <silent> <C-B> :<C-U>call smooth_scroll#up(&scroll*2, 0, 6)<CR>
nnoremap <silent> <C-F> :<C-U>call smooth_scroll#down(&scroll*2, 0, 6)<CR>



" ============= GENERAL =============

" set these only when vim starts, not when sourcing vimrc
if !exists('g:notfirstopen')
    let g:notfirstopen=1

    set termguicolors
    set background=dark

    colorscheme solarized8  " messes up Mundo if loaded again

    if has('gui_running')
        set lines=40 columns=120  " initial window size
        " changing font moves the window
        set guifont=Menlo:h16
    endif

    syntax enable

    highlight Comment term=NONE ctermfg=10 gui=NONE guifg=#586e75
    " make solarized8 terminal and gui cursor the same color
    highlight Cursor ctermfg=15 ctermbg=4 guifg=#073642 guibg=#839496
endif

" use the bash installed with homebrew as shell
set shell=/usr/local/bin/bash\ --login

set clipboard=unnamed  " use system clipboard, unnamedplus doesn't work with gvim

if has('gui_running')
    " GUI specific settings
    set guioptions=
    " Cursor is a vertical bar in insert mode and a block in normal mode.
    set guicursor+=a:blinkon0
    set guicursor+=i-ci:ver20-blinkon0
else
    " terminal specific settings
    set mouse=a
    if $TERM_PROGRAM =~ "iTerm"
        set ttymouse=sgr
        let &t_SI = "\e[6 q"
        let &t_EI = "\e[2 q"
        let &t_SR = "\e[4 q"
    endif
endif

" visuals
set cursorline
set number
set showmode showcmd
set report=1
set cmdheight=2
set hlsearch

" statusline
set laststatus=2                                           " always show statusline
set statusline=                                            " clear statusline
set statusline+=%l                                         " current line number
set statusline+=/%L                                        " total lines
set statusline+=(%p%%)                                     " percentage through the file
set statusline+=%4c                                        " cursor column
set statusline+=\|%-4{strwidth(getline('.'))}              " line length
set statusline+=%{&buftype!='terminal'?expand('%:p:h:t').'/'.expand('%:t'):expand('%')}  " dir/filename.ext
set statusline+=%m                                         " modified flag
set statusline+=%r                                         " read only flag
set statusline+=%=                                         " left/right separator
set statusline+=\ \|\ %{substitute(getcwd(),$HOME,'~','')} " current working directory
set statusline+=\ [%{strlen(&ft)?(&ft\ .\ \',\'):''}       " filetype
set statusline+=%{strlen(&fenc)?(&fenc\ .\ \',\'):''}      " file encoding
set statusline+=%{&ff}]                                    " line endings
set statusline+=%<                                         " start to truncate here

" line wrapping
set wrap linebreak textwidth=0 wrapmargin=0

" indentation settings
set tabstop=8 softtabstop=4 shiftwidth=4 expandtab
set smarttab  autoindent    breakindent

" show unwanted whitesace on 'set list'
set nolist listchars=tab:>-,trail:.,nbsp:.

" search settings
set incsearch hlsearch ignorecase smartcase gdefault

" no errorbells
set noerrorbells
augroup NoVisualBells
    autocmd!
    autocmd GUIEnter * set visualbell t_vb=
augroup END

" mixed settings
set timeoutlen=1000            " timeout for keymappings
set formatoptions=qlj          " don't autocontinue comment lines, remove comment when joining
set pumheight=12               " max height for the autocompletion popup
set nomodeline                 " don't try to parse commands from opened file
set ttimeoutlen=0              " remove delay from esc
set backspace=indent,eol,start " make backspace behave normally
set hidden                     " switch to another buffer without saving
set autoread                   " update changes to file automatically
set scrolloff=1                " pad cursor row with lines
set splitright                 " open splits to the right
set splitbelow                 " open splits to the bottom
set wildmode=list:longest,full " better tab completion on command line mode
set undofile                   " use an undofile for persistent undo
set undolevels=10000           " remember more undo history
set history=1000               " remember more command history
set updatecount=10             " update swap file more often
set matchpairs=(:),{:},[:]     " configure which braces to match
set shortmess=Sac              " shorter prompt messages, no ins completion messages
set title                      " show the current file in the window title
set titleold=                  " restore the old window title after exiting
let g:is_posix=1               " make sh filetype be posix shell compliant
filetype plugin indent on      " auto detect filetype



" ============= MAPPINGS =============

" make j and k populate the jump list, when used with a count
nnoremap <expr> j (v:count > 1 ? "m'" . v:count : '') . 'j'
nnoremap <expr> k (v:count > 1 ? "m'" . v:count : '') . 'k'

if has('gui_running')
    " move between splits (alt+hjkl)
    nnoremap ← <C-W>h
    nnoremap ↓ <C-W>j
    nnoremap ↑ <C-W>k
    nnoremap → <C-W>l

    " cycle tabs (alt+ui)
    nnoremap <silent>ü :tabprevious<CR>
    nnoremap <silent>↔︎ :tabnext<CR>

    tnoremap ← <C-W><C-H>
    tnoremap ↓ <C-W><C-J>
    tnoremap ↑ <C-W><C-K>
    tnoremap → <C-W><C-L>
    tnoremap <silent>ü <C-W>:tabprevious<CR>
    tnoremap <silent>↔︎ <C-W>:tabnext<CR>
else
    " move between splits (alt+hjkl)
    nnoremap <Esc>h <C-W>h
    nnoremap <Esc>j <C-W>j
    nnoremap <Esc>k <C-W>k
    nnoremap <Esc>l <C-W>l

    " cycle tabs (alt+ui)
    nnoremap <silent> <Esc>u :tabprevious<CR>
    nnoremap <silent> <Esc>i :tabnext<CR>

    tnoremap <Esc>h <C-W><C-H>
    tnoremap <Esc>j <C-W><C-J>
    tnoremap <Esc>k <C-W><C-K>
    tnoremap <Esc>l <C-W><C-L>
    tnoremap <silent> <Esc>u <C-W>:tabprevious<CR>
    tnoremap <silent> <Esc>i <C-W>:tabnext<CR>
endif

" makes these easier to use
noremap , :
tnoremap <C-W>, <C-W>:
noremap : ;
noremap ; ,
noremap g, g;
noremap g. g,

" makes these more consistent with other commands
nnoremap Y y$
nnoremap vv V
nnoremap V <C-V>$

" cleaner to use when cursor doesn't move
nnoremap J Jh

" make K the logical opposite of J
nnoremap K a<CR><Esc>k$

" select previously yanked text
nnoremap gb `[v`]

" paste to the next or previous line
nnoremap gp o<Esc>p^
nnoremap gP O<Esc>p^

" go to the first occurance of the symbol in the filename
nnoremap <silent> gf :set nohlsearch<CR>"zyiwgg/\C\<<C-R>z\><CR>:set hlsearch<BAR>noh<CR>

" substitute selected text
xnoremap <Leader>7 "zy:%s/<C-R>=escape(@z,'/\')<CR>/

" easy way to run : command again for a visual selection
xnoremap <Leader>' q:<UP>I'<,'><Esc>$

" " change eol comment to line comment and vice versa
" " this // is the default version for unspecified filetypes
" nnoremap ä :set nohlsearch<CR>$?\v//<CR>gEl"_d/\v\//<CR>"zDO<C-R>z<Esc>^:set hlsearch<BAR>noh<CR>
" nnoremap Ä ^"zD"_ddA  <C-R>z<Esc>^

" change enter behaviour
augroup EnterMappings
    autocmd!
    autocmd BufEnter * if &buftype !=# 'nofile'
            \| nnoremap <buffer> <silent> <CR> :<C-U>call <SID>BlankDown(v:count1)<CR>
            \| nnoremap <buffer> <silent> <S-Enter> :<C-U>call <SID>BlankUp(v:count1)<CR>
            \| endif
    autocmd CmdwinEnter * nnoremap <buffer> <CR> <CR>
augroup END

" make C-U and C-W undoable
inoremap <C-U> <C-G>u<C-U>
inoremap <C-W> <C-G>u<C-W>

" macvim doesn't support differentiating ctrl-i and tab
nnoremap <C-K> <C-I>
" to ensure that the default behavior is kept after mapping tab
nnoremap <C-I> <C-I>

" better way to indent
nnoremap <BS> <<
nnoremap <TAB> >>
xnoremap <BS> <gv
xnoremap <TAB> >gv

" persistent visuals
xnoremap > >gv
xnoremap < <gv
xnoremap <C-X> <C-X>gv
xnoremap <C-A> <C-A>gv

" Q plays back q macro
nnoremap Q @q

" repeat the last substitution
nnoremap & :&&<CR>
xnoremap & :s//~/&<CR>:noh<CR>

" search for selected text
xnoremap * "zy/\V<C-R>=escape(@z,'/\')<CR><CR>
xnoremap # "zy?\V<C-R>=escape(@z,'?\')<CR><CR>

" easier substitution
nnoremap <Leader>, :%s/
xnoremap <Leader>, :s/

" split line on comma
nnoremap \ hf,a<CR><Esc>^

" split function arguments or list members into their own lines
nnoremap <Leader>\ mq^f,`qv%J`qa<CR><Esc>k$%i<CR><Esc>k:s/, *\($\)\@!/,\r<CR>:noh<CR>`qv%=`q

" type a delimiter for splitting the line into separate lines
nnoremap <Leader><Leader>\ :s//&\r<Left><Left><Left><Left>
xnoremap <Leader><Leader>\ :s//&\r<Left><Left><Left><Left>

" clear highlights
nnoremap <nowait> <silent> <Esc> <Esc>:noh<CR>

" open vimrc, ideavimrc, or cocconfig
nnoremap <silent> <Leader>vr :e $MYVIMRC<CR>
nnoremap <silent> <Leader>cr :CocConfig<CR>
nnoremap <silent> <Leader>ir :e $HOME/.ideavimrc<CR>

nnoremap <silent> <Leader>] :windo diffthis<CR>
nnoremap <silent> <Leader>[ :windo diffoff<CR>



" ============= COMMANDS =============

" vim-plug commands
command! PI silent! w | PlugInstall
command! PC silent! w | PlugClean!
command! PU w | PlugUpgrade | PlugUpdate
command! PS exec 'PlugSnapshot! ' . PathToPluginsFolder . '/plugins.lock'

" source vimrc
command! SO so $MYVIMRC

" insert contents of command to buffer
command! -nargs=1 RE call RED('<args>')

" change the contents of a register
command! -nargs=1 CR call ChangeReg('<args>')

" change working directory to current file's directory
command! CD cd %:p:h



" ============= FUNCTIONS =============

" https://github.com/dhleong/dots/blob/master/.vim/init/terminal.vim
function! RunCommandInSplitTerm(command) abort
    write
    let winSize = float2nr(0.3 * winheight('$'))
    let mainBuf = bufnr('%')
    let termBufNr = get(b:, '_run_term', -1)
    let termWinNr = bufwinnr(termBufNr)

    if termWinNr == -1
        exe 'below split | resize ' . winSize
        if termBufNr == -1 || bufexists(termBufNr) == 0
            let termBufNr = term_start(&shell, {
                        \ 'curwin': 1,
                        \ 'term_finish': 'close',
                        \ })
            call setbufvar(mainBuf, '_run_term', termBufNr)
        else
            exe 'buffer' . termBufNr
        endif
    else
        exe termWinNr . 'wincmd w'
    endif

    let mainWin = bufwinnr(mainBuf)
    call term_sendkeys(termBufNr, a:command . "\<CR>")
    exe "normal \<C-W>p"
endfunction


" insert blank lines before current line
function! s:BlankUp(count) abort
    norm! mq
    for i in range(a:count)
        exec "norm! O\<Esc>0\"_D"
    endfor
    norm! `q
endfunction


" insert blank lines after current line
function! s:BlankDown(count) abort
    norm! mq
    for i in range(a:count)
        exec "norm! o\<Esc>0\"_D"
    endfor
    norm! `q
endfunction


" redir command's output to the current line
function! RED(command)
    redir => output
    silent exec a:command
    redir END
    let @z = substitute(output, '^\n', '', '')
    put z
    return ''
endfunction


function! ChangeReg(x) abort
  call feedkeys("q:ilet @" . a:x . " = \<c-r>\<c-r>=string(@" . a:x . ")\<cr>\<esc>0f'", 'n')
endfunction



" ============= AUTOCMD =============

" source vimrc when it's saved
augroup ReloadVimrc
    autocmd!
    autocmd BufWritePost *vimrc so $MYVIMRC
augroup END


" open help windows in a new tab
augroup HelpOpen
    autocmd!
    autocmd BufRead *.txt if &buftype ==? 'help'
                    \|exe "normal \<C-W>T"
                \|endif
augroup END


" clear trailing whitespace when saving vimrc
augroup TrimWhitespace
    autocmd!
    autocmd BufWritePre *vimrc :%s/\s\+$//e
augroup END


" automatically activate some filetypes
augroup FileTypes
    autocmd!
    autocmd BufRead,BufNewFile Dockerfile* set filetype=dockerfile
augroup END
