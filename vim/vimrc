" ============= SETUP =============

let g:mapleader=' '

" language settings (have to be before ä and ö mappings)
let $LANG='en_US'
set fileformats=unix,dos
set fileencodings=ucs-bom,utf-8,default,latin1
set encoding=utf-8
scriptencoding utf-8


let TempFolder = '/.temp'
let PluginsFolder = '/plugins'
if has('win32')
    let VimFolder = '/vimfiles'
    exe 'set viminfo+=n~' . VimFolder . TempFolder . '/_viminfo'
else
    let VimFolder = '/.vim'
    exe 'set viminfo+=n~' . VimFolder . TempFolder . '/.viminfo'
endif
let PathToTempFolder = $HOME . VimFolder . TempFolder
let PathToPluginsFolder = $HOME . VimFolder . PluginsFolder


" make sure that the temp file locations exists
for folder in ['/undo', '/backup', '/swap']
    if !isdirectory(PathToTempFolder . folder)
        call mkdir(PathToTempFolder . folder, 'p')
    endif
endfor

" temp file locations
let &undodir = PathToTempFolder . '/undo'
let &backupdir = PathToTempFolder . '/backup'
let &directory = PathToTempFolder . '/swap'



" ============= PLUGINS =============

call plug#begin(PathToPluginsFolder)
if has('win32')
    Plug 'Yggdroot/LeaderF', { 'do': '.\install.bat' }
else
    Plug '/usr/local/opt/fzf'
    Plug 'junegunn/fzf.vim'
endif
Plug 'google/vim-searchindex'          " show [x/y] when searching
Plug 'terryma/vim-smooth-scroll'       " smooth scrolling
Plug 'machakann/vim-highlightedyank'   " highlight yanks
Plug 'markonm/traces.vim'              " live substitution

Plug 'easymotion/vim-easymotion'       " jump to any position
Plug 'simnalamburt/vim-mundo'          " graphical undotree
Plug 'maxbrunsfeld/vim-yankstack'      " remember past yanks

Plug 'tpope/vim-surround'              " edit braces easily
Plug 'tpope/vim-commentary'            " comment out lines
Plug 'tpope/vim-repeat'                " repeat plugin commands
Plug 'vim-scripts/ReplaceWithRegister' " operator to replace text
Plug 'wellle/targets.vim'              " more text objects
Plug 'junegunn/vim-easy-align'         " align text with motion
Plug 'tommcdo/vim-exchange'            " change two objects

Plug 'tpope/vim-eunuch'                " file operations

Plug 'sheerun/vim-polyglot'            " better syntax highlighting
Plug 'xuhdev/vim-latex-live-preview', { 'for': 'tex' } " live preview for latex
Plug 'maralla/completor.vim'           " autocompletion
Plug 'kyouryuukunn/completor-necovim'  " vimscript support for completor
Plug 'tpope/vim-sleuth'                " automatic indendation settings

" colorshemes
Plug 'lifepillar/vim-solarized8'
Plug 'pgdouyon/vim-yin-yang'
call plug#end()


" xuhdev/vim-latex-live-preview
let g:livepreview_previewer = 'open -a Skim'

" maralla/completor.vim
inoremap <expr> <Tab> pumvisible() ? "\<C-Y>" : "\<Tab>"
inoremap <expr> <C-J> pumvisible() ? "\<Down>" : "\<C-J>"
inoremap <expr> <C-K> pumvisible() ? "\<Up>" : "\<C-K>"
let g:completor_complete_options='menuone,noinsert'
let g:completor_completion_delay=0
if has ('win32')
    let g:completor_python_binary = 'C:\Users\eero.ruohola\AppData\Local\Programs\Python\Python37-32\python.exe'
else
    let g:completor_python_binary = '/usr/local/bin/python3'
endif

if has('win32')
    " Yggdroot/LeaderF
    " Requires ripgrep: https://github.com/BurntSushi/ripgrep
    " A lot faster if the C extension is installed with the install script
    let g:Lf_StlColorscheme='default'
    let g:Lf_CursorBlink=0
    let g:Lf_UseVersionControlTool=0
    let g:Lf_DefaultExternalTool='rg'
    let g:Lf_ShowHidden=1
    let g:Lf_CacheDirectory=PathToTempFolder
    let g:Lf_IndexTimeLimit=600
    let g:Lf_UseCache=1
    let g:Lf_HighlightIndividual=1
    let g:Lf_NumberOfHighlight=100
    let g:Lf_UseMemoryCache=1
    let g:Lf_WildIgnore = {
            \ 'dir': ['.git'],
            \ 'file': []
            \}
    let g:Lf_CommandMap = {'<C-K>': ['<Up>'], '<C-J>': ['<Down>']}
    let g:Lf_ShortcutF='<Leader>f'
    nnoremap <Leader>l :LeaderfLineAll<CR>
    nnoremap <Leader>h :LeaderfHelp<CR>
    nnoremap <Leader>b :LeaderfBufferAll<CR>
    nnoremap <Leader>m :LeaderfMru<CR>
else
    " junegunn/fzf.vim
    nnoremap <Leader>f :Files<CR>
    nnoremap <Leader>l :Lines<CR>
    nnoremap <Leader>h :Helptags<CR>
    nnoremap <Leader>b :Buffers<CR>
    nnoremap <Leader>m :History<CR>
endif

" maxbrunsfeld/vim-yankstack
let g:yankstack_map_keys = 0
nmap <C-P> <Plug>yankstack_substitute_older_paste
nmap <C-N> <Plug>yankstack_substitute_newer_paste
call yankstack#setup()

" easymotion/vim-easymotion
let g:EasyMotion_keys='asdghklqwertyuiopzxcvbnmfj'
let g:EasyMotion_do_shade=0
let g:EasyMotion_do_mapping=0
map <Leader>k <Plug>(easymotion-bd-f)

" machakann/vim-highlightedyank
let g:highlightedyank_highlight_duration=300

" simnalamburt/vim-mundo
let g:mundo_preview_statusline='Diff'
let g:mundo_tree_statusline='History'
let g:mundo_mirror_graph=0
let g:mundo_return_on_revert=0
let g:mundo_verbose_graph=0
nnoremap <silent> <Leader>n :MundoToggle<CR>

" junegunn/vim-easy-align
nmap gl <Plug>(EasyAlign)
xmap gl <Plug>(EasyAlign)

" vim-scripts/ReplaceWithRegister
nmap ö <Plug>ReplaceWithRegisterOperator
nmap Ö <Plug>ReplaceWithRegisterOperator$
nmap öö <Plug>ReplaceWithRegisterLine
xmap ö <Plug>ReplaceWithRegisterVisual

" terryma/vim-smooth-scroll
nnoremap <silent> <C-U> :<C-U>call smooth_scroll#up(&scroll, 0, 4)<CR>
nnoremap <silent> <C-D> :<C-U>call smooth_scroll#down(&scroll, 0, 4)<CR>
nnoremap <silent> <C-B> :<C-U>call smooth_scroll#up(&scroll*2, 0, 6)<CR>
nnoremap <silent> <C-F> :<C-U>call smooth_scroll#down(&scroll*2, 0, 6)<CR>



" ============= GENERAL =============

" set these only when vim starts, not when sourcing vimrc
if !exists('g:notfirstopen')
    let g:notfirstopen=1

    set termguicolors
    set background=dark

    colorscheme solarized8  " messes up Mundo if loaded again

    if has('gui_running')
        set lines=40 columns=120  " initial window size
        if has ('win32')
            " changing font moves the window
            set guifont=Consolas:h12
        else
            set guifont=SFMono-Regular:h16
        endif
    endif

    syntax enable

    highlight Comment term=NONE ctermfg=10 gui=NONE guifg=#586e75
    " make solarized8 terminal and gui cursor the same color
    highlight Cursor ctermfg=15 ctermbg=4 guifg=#073642 guibg=#839496
endif

if has('win32')
    " use git bash as shell
    set shell=C:/Program\ Files/Git/bin/bash.exe\ --login
else
    " use the bash installed with homebrew as shell
    set shell=/usr/local/bin/bash\ --login
endif

set clipboard=unnamed  " use system clipboard, unnamedplus doesn't work with gvim

if has('gui_running')
    " GUI specific settings
    set guioptions=
    " Cursor is a vertical bar in insert mode and a block in normal mode.
    set guicursor+=a:blinkon0
    set guicursor+=i-ci:ver20-blinkon0
else
    " Terminal specific settings
    set mouse=a
    if $TERM_PROGRAM =~ "iTerm"
        set ttymouse=sgr
        let &t_SI = "\e[6 q"
        let &t_EI = "\e[2 q"
        let &t_SR = "\e[4 q"
    endif
endif

" visuals
set cursorline
set number relativenumber
set showmode showcmd
set report=1
set cmdheight=2

" statusline
set laststatus=2                                           " always show statusline
set statusline=                                            " clear statusline
set statusline+=%l                                         " current line number
set statusline+=/%L                                        " total lines
set statusline+=(%p%%)                                     " percentage through the file
set statusline+=%4c                                        " cursor column
set statusline+=\|%-4{strwidth(getline('.'))}              " line length
if has('win32')
    " different separator between current filename and folder for Windows: \ vs *nix: /
    " could maybe be cleaner, but this does the job
    set statusline+=%{&buftype!='terminal'?expand('%:p:h:t').'\\'.expand('%:t'):expand('%')} " dir\filename.ext
else
    set statusline+=%{&buftype!='terminal'?expand('%:p:h:t').'/'.expand('%:t'):expand('%')}  " dir/filename.ext
endif
set statusline+=%m                                         " modified flag
set statusline+=%r                                         " read only flag
set statusline+=%=                                         " left/right separator
set statusline+=\ \|\ %{substitute(getcwd(),$HOME,'~','')} " current working directory
set statusline+=\ [%{strlen(&ft)?(&ft\ .\ \',\'):''}       " filetype
set statusline+=%{strlen(&fenc)?(&fenc\ .\ \',\'):''}      " file encoding
set statusline+=%{&ff}]                                    " line endings
set statusline+=%<                                         " start to truncate here

" line wrapping
set wrap linebreak textwidth=0 wrapmargin=0

" indentation settings
set tabstop=8 softtabstop=4 shiftwidth=4 expandtab
set smarttab  autoindent    breakindent

" show unwanted whitespace on 'set list'
set nolist listchars=tab:>-,trail:.,nbsp:.

" search settings
set incsearch hlsearch ignorecase smartcase gdefault

" no errorbells
set noerrorbells
augroup NoVisualBells
    autocmd!
    autocmd GUIEnter * set visualbell t_vb=
augroup END

" mixed settings
set timeoutlen=2000            " timeout for keymappings
" TODO: formatoptions should be set in filetype files, otherwise they get overridden
set formatoptions=qlj          " don't autocontinue comment lines, remove comment when joining
set pumheight=12               " max height for the autocompletion popup
set nomodeline                 " don't try to parse commands from opened file
set ttimeoutlen=0              " remove delay from esc
set backspace=indent,eol,start " make backspace behave normally
set hidden                     " switch to another buffer without saving
set autoread                   " update changes to file automatically
set scrolloff=1                " pad cursor row with lines
set splitright                 " open splits to the right
set splitbelow                 " open splits to the bottom
set wildmode=list:longest,full " better tab completion on command line mode
set undofile                   " use an undofile for persistent undo
set undolevels=10000           " remember more undo history
set history=1000               " remember more command history
set updatecount=10             " update swap file more often
set matchpairs=(:),{:},[:]     " configure which braces to match
set shortmess=a                " shorter prompt messages
filetype plugin indent on      " auto detect filetype



" ============= MAPPINGS =============

" make j and k populate the jump list, when used with a count
nnoremap <expr> j (v:count > 1 ? "m'" . v:count : '') . 'j'
nnoremap <expr> k (v:count > 1 ? "m'" . v:count : '') . 'k'

if has('win32')
    " traverse history with alt+,.
    nnoremap ® g,
    nnoremap ¬ g;

    " split navigations (alt+hjkl)
    nnoremap è <C-W><C-H>
    nnoremap ê <C-W><C-J>
    nnoremap ë <C-W><C-K>
    nnoremap ì <C-W><C-L>

    " cycle buffers (alt+nm)
    nnoremap <silent> î :bprev<CR>
    nnoremap <silent> í :bnext<CR>

    " cycle tabs (alt+ui)
    nnoremap <silent>õ :tabprevious<CR>
    nnoremap <silent>é :tabnext<CR>

    " toggle fullscreen
    nnoremap <silent> <Leader>0 :<C-U>call libcallnr("gvimfullscreen.dll", "ToggleFullScreen", 0)<CR>

    if has('terminal')
        tnoremap è <C-W><C-H>
        tnoremap ê <C-W><C-J>
        tnoremap ë <C-W><C-K>
        tnoremap ì <C-W><C-L>
        tnoremap <silent> î <C-W>:bprev<CR>
        tnoremap <silent> í <C-W>:bnext<CR>
        tnoremap <silent>õ <C-W>:tabprevious<CR>
        tnoremap <silent>é <C-W>:tabnext<CR>
    endif

    " unmap push-to-talk key
    map <F13> <Nop>
    map! <F13> <Nop>
else
    " traverse history with alt+,.
    nnoremap ′ g,
    nnoremap … g;

    " split navigations (alt+hjkl)
    nnoremap ← <C-W><C-H>
    nnoremap ↓ <C-W><C-J>
    nnoremap ↑ <C-W><C-K>
    nnoremap → <C-W><C-L>

    " cycle buffers (alt+nm)
    nnoremap <silent> № :bprev<CR>
    nnoremap <silent> µ :bnext<CR>

    " cycle tabs (alt+ui)
    nnoremap <silent>ü :tabprevious<CR>
    nnoremap <silent>↔︎ :tabnext<CR>

    if has('terminal')
        tnoremap ← <C-W><C-H>
        tnoremap ↓ <C-W><C-J>
        tnoremap ↑ <C-W><C-K>
        tnoremap → <C-W><C-L>
        tnoremap <silent> № <C-W>:bprev<CR>
        tnoremap <silent> µ <C-W>:bnext<CR>
        tnoremap <silent>ü <C-W>:tabprevious<CR>
        tnoremap <silent>↔︎ <C-W>:tabnext<CR>
    endif
endif

" makes these easier to use
noremap , :
if has('terminal')
    tnoremap <C-W>, <C-W>:
endif
noremap : ;
noremap ; ,
noremap @, @:
augroup QMappings
    autocmd!
    autocmd FileType * if &l:buftype !=# 'nofile' |nnoremap <buffer> <silent> q, q:| endif
    autocmd FileType * if &l:buftype !=# 'nofile' |xnoremap <buffer> <silent> q, q:| endif
    autocmd FileType * if &l:buftype ==# 'nofile' |nnoremap <buffer> <silent> q :q<CR>| endif
augroup END

" make Y behave the same way as D and C
nnoremap Y y$

" makes v and V more consistent with other commands
nnoremap vv V
nnoremap V <C-V>$

" makes these more useful
nnoremap S ciw

" cleaner to use when cursor doesn't move
nnoremap J Jh

" make K the logical opposite of J
nnoremap K a<CR><Esc>k$

" makes using marks a lot better
nnoremap ' `

" select previously yanked text
nnoremap gb `[v`]

" search for selected text
xnoremap <Leader>/ "zy/\V<C-R>=escape(@z,'/\')<CR><CR>

" change eol comment to line comment and vice versa
" this // is the default version for unspecified filetypes
nnoremap ä :set nohlsearch<CR>$?\v//<CR>gEl"_d/\v\//<CR>"qDO<C-R>q<Esc>^:set hlsearch<BAR>noh<CR>
nnoremap Ä ^"qD"_ddA  <C-R>q<Esc>^

xnoremap <Leader>, q:<UP>I'<,'><Esc>$

" navigate quickfix list and vimgrep
nnoremap <silent> <Down> :cnext<CR>
nnoremap <silent> <Up> :cprev<CR>
nnoremap <silent> <C-Down> :cnfile<CR><C-G>
nnoremap <silent> <C-Up> :cpfile<CR><C-G>

" make C-U and C-W and CR undoable
inoremap <C-U> <C-G>u<C-U>
inoremap <C-W> <C-G>u<C-W>
inoremap <CR> <C-G>u<CR>

" change enter behaviour
augroup EnterMappings
    autocmd!
    autocmd BufEnter * if &l:buftype ==# ''
            \| nnoremap <buffer> <CR> :<C-U>call <SID>BlankDown(v:count1)<CR>
            \| nnoremap <buffer> <S-Enter> :<C-U>call <SID>BlankUp(v:count1)<CR>
            \| endif
    autocmd BufWinEnter * if &l:buftype ==# 'quickfix'
            \| unmap <buffer> <CR>
            \| endif
augroup END

" move CTRL-I, since tab is taken
nnoremap <C-K> <C-I>

" better way to indent
nnoremap <BS> <<
nnoremap <TAB> >>
xnoremap <BS> <gv
xnoremap <TAB> >gv

" persistent visuals
xnoremap > >gv
xnoremap < <gv
xnoremap <C-X> <C-X>gv
xnoremap <C-A> <C-A>gv

" paste to the next line
nnoremap gp o<Esc>p^

" Q plays back q macro
nnoremap Q @q

" clear highlights
if has('gui_running')
    nnoremap <silent> <Esc> <Esc>:noh<CR>
else
    augroup ClearHighlights
        autocmd!
        autocmd TermResponse * nnoremap <silent> <Esc> <Esc>:noh<CR>|nnoremap <Esc>[ <Esc>[
    augroup END
endif

" open vimrc
" nnoremap <silent> <Leader>vr :tabe<BAR>tabm<BAR>e $MYVIMRC<CR>
nnoremap <silent> <Leader>vr :e $MYVIMRC<CR>

" make mappings work by visual lines
noremap <silent> <Leader>w :<C-U>call WrapMappingsOn()<CR>
noremap <silent> <Leader>q :<C-U>call WrapMappingsOff()<CR>

" add or remove end-of-line comments
nnoremap <silent> <Leader>[ :<C-U>call <SID>AddEOLComment(v:count1)<CR>
nnoremap <silent> <Leader>] :<C-U>call <SID>NoEOLComment(v:count1)<CR>

" insert contents of command to buffer
nnoremap <Leader>re :call RED('')<Left><Left>

" change the contents of a register
nnoremap <Leader>c :call ChangeReg()<cr>


" ============= COMMANDS =============

" vim-plug commands
command! PI silent! w | PlugInstall
command! PC silent! w | PlugClean!
" PlugUpgrade breaks vim-plug on windows atm
" command! PU silent! w | PlugUpgrade | PlugUpdate
command! PU silent! w | PlugUpdate
command! PS silent! exec ':w | PlugSnapshot! ' . PathToPluginsFolder . '/plugins.lock'

" source vimrc
command! SO so $MYVIMRC

" count lines in file
command! WC %s/^\s*\w\+//n | noh

" count all .py files lines, have to have terminal open in tab 1 for this to work.
command! PL write|tabn 1|call <SID>RunCommandInSplitTerm("grep -vc '^\\s*$' *.py && echo -n 'total:' && grep -v '^\\s*$' *.py | wc -l")

" change working directory to current file's directory
command! CD cd %:p:h|pwd



" ============= FUNCTIONS =============

" https://github.com/dhleong/dots/blob/master/.vim/init/terminal.vim
function! RunCommandInSplitTerm(command) abort
    write
    let winSize = float2nr(0.3 * winheight('$'))
    let mainBuf = bufnr('%')
    let termBufNr = get(b:, '_run_term', -1)
    let termWinNr = bufwinnr(termBufNr)

    if termWinNr == -1
        exe 'below split | resize ' . winSize
        let termBufNr = term_start('bash -l', {
                    \ 'curwin': 1,
                    \ 'term_finish': 'close',
                    \ })
        call setbufvar(mainBuf, '_run_term', termBufNr)
    else
        exe termWinNr . 'wincmd w'
    endif

    let mainWin = bufwinnr(mainBuf)
    call term_sendkeys(termBufNr, a:command . '')  " should be literal ^M
    exe "normal \<C-W>p"
endfunction


" insert blank lines before current line
function! s:BlankUp(count) abort
    norm! mq
    for i in range(a:count)
        " should be literal ^[
        norm! O0"_D
    endfor
    norm! `q
endfunction


" insert blank lines after current line
function! s:BlankDown(count) abort
    norm! mq
    for i in range(a:count)
        " should be literal ^[
        norm! o0"_D
    endfor
    norm! `q
endfunction


" insert an EOL comment to the end of N lines
function! s:AddEOLComment(count) abort
    let char = strpart(&commentstring, 0, 1)
    if char == strpart(&commentstring, 1, 1)
        " Knows to insert two chars for commenting if 'commentstring'
        " is for example //%s (in java) vs only one char e.g. #%s in python.
        let char = char . char
    endif
    for i in range(a:count)
        execute 'norm! A  '.char.' j'
    endfor
    norm! k
    startinsert!
endfunction


" remove an EOL comment from the end of N lines
function! s:NoEOLComment(count) abort
    norm! mq
    let char = strpart(&commentstring, 0, 1)
    for i in range(a:count)
        execute 'norm! 0f'.char.'gEl"_D'
        " j command is separated so that if the above failes, it still continues the loop
        norm! j
    endfor
    norm! `q
endfunction


function! WrapMappingsOn()
    noremap <buffer> <silent> j gj
    noremap <buffer> <silent> k gk
    noremap <buffer> <silent> $ g$
    noremap <buffer> <silent> ^ g^
    noremap <buffer> <silent> 0 g0
endfunction

function! WrapMappingsOff()
    noremap <buffer> <silent> j j
    noremap <buffer> <silent> k k
    noremap <buffer> <silent> $ $
    noremap <buffer> <silent> ^ ^
    noremap <buffer> <silent> 0 0
endfunction


" redir command's output to the current line
function! RED(command)
    redir => output
    silent exec a:command
    redir END
    let @z = substitute(output, '^\n', '', '')
    execute "put z"
    return ''
endfunction


fun! ChangeReg() abort
  let x = nr2char(getchar())
  call feedkeys("q:ilet @" . x . " = \<c-r>\<c-r>=string(@" . x . ")\<cr>\<esc>0f'", 'n')
endfun



" ============= AUTOCMD =============

" toggle relative numbers between modes
augroup LineNumbers
    autocmd!
    autocmd WinEnter,FocusGained,InsertLeave * if &l:buftype !=# 'nofile' && &l:buftype !=# 'nowrite' |set relativenumber|endif
    autocmd WinLeave,FocusLost,InsertEnter * if &l:buftype !=# 'nofile' && &l:buftype !=# 'nowrite' |set norelativenumber|endif
augroup END


" source vimrc when it's saved
augroup ReloadVimrc
    autocmd!
    autocmd BufWritePost *vimrc so $MYVIMRC
augroup END


" configure opening of help windows
augroup HelpOpen
    autocmd!
    autocmd BufRead *.txt if &buftype ==? 'help'
                    \|set number
                    \|set relativenumber
                    \|exe "normal \<C-W>T"
                \|endif
augroup END


" clear trailing whitespace on save
augroup TrimWhitespace
    autocmd!
    autocmd BufWritePre *vimrc :%s/\s\+$//e
augroup END



" ============= REGISTERS =============

" clear the search register for no highlighting on startup
let @/=''
" macro to add a plugin
let @p='gg/call plug#end()OPlug ''+'''
