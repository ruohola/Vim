let mapleader=' '


" ============= PLUGINS =============

set surround
set multiple-cursors
set commentary
set argtextobj
set textobj-entire
set ReplaceWithRegister

" surround
nmap S ysiW

" ReplaceWithRegister
nmap ö <PLug>ReplaceWithRegisterOperator
nmap Ö <PLug>ReplaceWithRegisterOperator$
nmap öö <PLug>ReplaceWithRegisterLine
vmap ö <PLug>ReplaceWithRegisterVisual

" emulates tommcdo/vim-exchange
" TODO: add more text objects
nnoremap cxiw "jyiwma
nnoremap criw "kdiw"jPmb`a"_diw"kP

" emulates wellle/targets.vim
" (no di/da mappings here, they clash with surround)
" better text objects for braces
" keep the ci(, ci> etc. for the regular behavior
nnoremap ci) %ci)
nnoremap ca) %ca)
nnoremap ci] %ci]
nnoremap ca] %ca]
nnoremap ci} %ci}
nnoremap ca} %ca}
nnoremap ci< hf<ci>
nnoremap ca< hf<ca>
" text objects for delimiters
nnoremap ci/ f/cT/
nnoremap ca/ f/vF/c
nnoremap ci, f,cT,
nnoremap ca, f,vF,c
nnoremap ci. f.cT.
nnoremap ca. f.vF.c
nnoremap ci_ f_cT_
nnoremap ca_ f_vF_c
nnoremap ci- f-cT-
nnoremap ca- f-vF-c
nnoremap ci% f%cT%
nnoremap ca% f%vF%c
nnoremap ci= f=cT=
nnoremap ca= f=vF=c
nnoremap ci? f?cT?
nnoremap ca? f?vF?c
nnoremap ci! f!cT!
nnoremap ca! f!vF!c
nnoremap ci& f&cT&
nnoremap ca& f&vF&c
" (these don't clash with surround)
nnoremap di/ f/dT/
nnoremap da/ f/vF/d
nnoremap di, f,dT,
nnoremap da, f,vF,d
nnoremap di. f.dT.
nnoremap da. f.vF.d
nnoremap di_ f_dT_
nnoremap da_ f_vF_d
nnoremap di- f-dT-
nnoremap da- f-vF-d
nnoremap di% f%dT%
nnoremap da% f%vF%d
nnoremap di= f=dT=
nnoremap da= f=vF=d
nnoremap di? f?dT?
nnoremap da? f?vF?d
nnoremap di! f!dT!
nnoremap da! f!vF!d
nnoremap di& f&dT&
nnoremap da& f&vF&d


" ============= GENERAL =============

" line numbers
set number relativenumber

" search settings
set incsearch hlsearch ignorecase smartcase gdefault

set ideajoin                  " use the IDE's join/J behavior
set selectmode=ideaselection
set timeoutlen=1000           " timeout for keymappings
set clipboard=unnamed,ideaput " use system clipboard with idea's pasting logic
set scrolloff=1               " pad scrolling with one line
set showmode                  " show current mode in statusbar
set showcmd                   " show partial command in statusbar
set visualbell                " removes errorbells


" ============= MAPPINGS =============

" move between splits
nnoremap <A-L> <C-W>l
nnoremap <A-H> <C-W>h
nnoremap <A-J> <C-W>j
nnoremap <A-K> <C-W>k

" makes these easier to use
noremap , :
noremap : ;
noremap ; ,

" make Y behave the same way as D and C
nnoremap Y y$

" makes v and V more consistent with other commands
nnoremap vv V
nnoremap V <C-V>$

" cleaner to use when cursor doesn't move
nnoremap J Jh

" make K the logical opposite of J
nnoremap K a<CR><Esc>k$

" change enter behavior
nnoremap <CR> mqo<Esc>`q
nnoremap <S-Enter> mqO<Esc>`q

" better way to indent
nnoremap <BS> <<
nnoremap <TAB> >>
vnoremap <BS> <gv
vnoremap <TAB> >gv

" persistent visuals
vnoremap > >gv
vnoremap < <gv
vnoremap <C-X> <C-X>gv
vnoremap <C-A> <C-A>gv

" Q plays back q macro
nnoremap Q @q

" repeat the last substitution
nnoremap & g&
vnoremap & :s//~/&<CR>:noh<CR>

nnoremap - :%s/
vnoremap - :s/
nnoremap <Leader>- :s//&\r<Left><Left><Left><Left>
vnoremap <Leader>- :s//&\r<Left><Left><Left><Left>

nnoremap + f i<CR><Esc>^

" split function arguments or list members into their own lines
nnoremap <Leader>+ mq^f,`qv%J`qa<CR><Esc>k$%i<CR><Esc>k:s/, *\($\)\@!/,\r<CR>:noh<CR>`qv%=`q

" clear highlights
nnoremap <Esc> <Esc>:noh<CR>

" change eol comment to line comment and vice versa
nnoremap ä $?\v//\|#<CR>gEl"_d/\v\/\/\|#<CR>:noh<CR>"zDO<C-R>z<Esc>^
nnoremap Ä ^"zD"_ddA  <C-R>z<Esc>^

" makes using marks a lot better, ` mapping clashes with surround
nnoremap ' :action ShowBookmarks<CR>
nnoremap m :action ToggleBookmarkWithMnemonic<CR>

" select previously yanked text
nnoremap gb `[v`]

" paste to the next or previous line
nnoremap gp o<Esc>p^
nnoremap gP O<Esc>p^

nnoremap gd :action GotoDeclarationOnly<CR>
nnoremap gs :action GotoSuperMethod<CR>
nnoremap gr :action GotoRelated<CR>
nnoremap gt :action GotoTest<CR>
nnoremap gf mo"qyiwgg/<C-R>q<CR>:noh<CR>

" these only make sense as ideavim mappings,
" since vim defines so many ]x mappings
nnoremap [ :action MethodUp<CR>
nnoremap ] :action MethodDown<CR>

noremap  <Leader>a :action GotoAction<CR>
nnoremap <Leader>b :action ToggleLineBreakpoint<CR>
nnoremap <Leader>c :action GotoClass<CR>
nnoremap <Leader>d :action QuickJavaDoc<CR>
nnoremap <Leader>e :action Run<CR>
nnoremap <Leader>f :action GotoFile<CR>
nnoremap <Leader>g :action ManageRecentProjects<CR>
nnoremap <Leader>h :action FileStructurePopup<CR>
nnoremap <Leader>i :action QuickImplementations<CR>
nnoremap <Leader>j :action ShowNavBar<CR>
nnoremap <Leader>k :action KJumpAction<CR>
nnoremap <Leader>l :action FindInPath<CR>
nnoremap <Leader>m :action RecentChangedFiles<CR>
nnoremap <Leader>n :action LocalHistory.ShowHistory<CR>
vnoremap <Leader>n :action LocalHistory.ShowSelectionHistory<CR>
nnoremap <Leader>o :action ShowReformatFileDialog<CR>
vnoremap <Leader>o :action ReformatCode<CR>
nnoremap <Leader>p :action PasteMultiple<CR>
nnoremap <Leader>q :action ChooseRunConfiguration<CR>
nnoremap <Leader>r :action RenameElement<CR>
nnoremap <Leader>s :action GotoSymbol<CR>
noremap  <Leader>t :action ExpressionTypeInfo<CR>
nnoremap <Leader>u :action ShowUsages<CR>
nnoremap <Leader>v :action ViewBreakpoints<CR>
nnoremap <Leader>w :action Debug<CR>
noremap  <Leader>x :action Refactorings.QuickListPopupAction<CR>
nnoremap <Leader>y :action ShowErrorDescription<CR>
nnoremap <Leader>z :action RenameFile<CR>
nnoremap <Leader>ä :action CallHierarchy<CR>
nnoremap <Leader>ö :action HighlightUsagesInFile<CR>

nnoremap <Leader>< :action NewFile<CR>
noremap  <Leader>[ :action SurroundWith<CR>
noremap  <Leader>] :action Unwrap<CR>
nnoremap <Leader>' :action Generate<CR>

nnoremap <Leader>1 :action InspectCode<CR>
nnoremap <Leader>2 :action DebugClass<CR>
nnoremap <Leader>3 :action RunClass<CR>
nnoremap <Leader>4 :action Vcs.ShowTabbedFileHistory<CR>
vnoremap <Leader>4 :action Vcs.ShowHistoryForBlock<CR>
nnoremap <Leader>5 :action Annotate<CR>
nnoremap <Leader>6 :action Compare.SameVersion<CR>
nnoremap <Leader>7 :action ReplaceInPath<CR>
nnoremap <Leader>9 :action GotoImplementation<CR>

nnoremap <Leader>" o"""

nnoremap <Leader><Esc> :action MarkNotificationsAsRead<CR>

nnoremap <C-H> :action ParameterInfo<CR>
nnoremap <C-J> :action EditorCloneCaretBelow<CR>
nnoremap <C-K> :action EditorCloneCaretAbove<CR>
inoremap <C-H> <C-O>:action ParameterInfo<CR>
inoremap <C-J> <C-O>:action EditorCloneCaretBelow<CR>
inoremap <C-K> <C-O>:action EditorCloneCaretAbove<CR>
inoremap <C-X> <C-O>:action CodeCompletion<CR>

nnoremap <C-P> :action GotoPreviousError<CR>
nnoremap <C-N> :action GotoNextError<CR>

nnoremap <C-O> :action Back<CR>
nnoremap <C-I> :action Forward<CR>

nnoremap <C-2> :action ActivateProjectToolWindow<CR>
nnoremap <C-3> :action ActivateRunToolWindow<CR>
nnoremap <C-4> :action ActivateDebugToolWindow<CR>
nnoremap <C-5> :action ActivateTerminalToolWindow<CR>
nnoremap <C-6> :action ActivatePythonConsoleToolWindow<CR>
nnoremap <C-7> :action Django.RunManageTaskAction<CR>
nnoremap <C-0> :action ActivateVersionControlToolWindow<CR>

nnoremap <F10> :action ExportSettings<CR>
nnoremap <F11> :action ImportSettings<CR>
nnoremap <F12> :source ~/.ideavimrc<CR>
